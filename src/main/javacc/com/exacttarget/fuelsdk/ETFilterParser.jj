//
// This file is part of the Fuel Java SDK.
//
// Copyright (C) 2013, 2014 ExactTarget, Inc.
// All rights reserved.
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software
// is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
// KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
// OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
// OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
// OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
// THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

options
{
    static = false;
}

PARSER_BEGIN(ETFilterParser)
package com.exacttarget.fuelsdk;

import org.apache.log4j.Logger;

public class ETFilterParser {
    private static Logger logger = Logger.getLogger(ETFilterParser.class);
}
PARSER_END(ETFilterParser)

SKIP: { " " | "\n" | "\r" | "\t" }

TOKEN [IGNORE_CASE]:
{
    < AND : "and" >
    | < OR : "or" >
    | < NOT : "not" >
    | < BETWEEN : "between" >
    | < IN : "in" >
    | < IS : "is" >
    | < LIKE : "like" >
    | < NULL : "null" >
}

TOKEN:
{
    < UNQUOTED_STRING : (~[" ", "\n", "\r", "\t", "'", "\"", "=", "!", "<", ">", "(", ")", ","])+ >
    | < SINGLE_QUOTED_STRING : "'" (~["\n", "\r", "'"])* "'" >
    | < DOUBLE_QUOTED_STRING : "\"" (~["\n", "\r", "\""])* "\"" >
}

ETFilter parse():
{
    ETFilter filter = null;
}
{
    filter = Expression()

    {
        logger.trace("returning filter: " + filter);
        return filter;
    }
}

ETFilter Expression():
{
    ETFilter filter = null;
}
{
    (
        LOOKAHEAD(OrExpression()) filter = OrExpression()
        | "(" filter = Expression() ")"
        {
            ETFilter f = filter;
            filter = new ETFilter();
            filter.addFilter(f);
        }
    )

    {
        logger.trace("Expression: " + filter);
        return filter;
    }
}

ETFilter OrExpression():
{
    ETFilter filter = null;
    ETFilter filter1 = null;
    ETFilter filter2 = null;
}
{
    filter1 = AndExpression()
    {
        filter = filter1;
    }
    (
        LOOKAHEAD(<OR>) <OR>
        filter2 = AndExpression()
        {
            filter = new ETFilter();
            filter.setOperator("or");
            filter.addFilter(filter1);
            filter.addFilter(filter2);
            filter1 = filter;
        }
    )*

    {
        logger.trace("OrExpression: " + filter);
        return filter;
    }
}

ETFilter AndExpression():
{
    ETFilter filter = null;
    ETFilter filter1 = null;
    ETFilter filter2 = null;
}
{
    (
        LOOKAHEAD(SimpleExpression()) filter1 = SimpleExpression()
        | "(" filter1 = OrExpression() ")"
        {
            ETFilter f = filter1;
            filter1 = new ETFilter();
            filter1.addFilter(f);
        }
    )
    {
        filter = filter1;
    }

    (
        LOOKAHEAD(<AND>) <AND>
        (
            LOOKAHEAD(SimpleExpression()) filter2 = SimpleExpression()
            | "(" filter2 = OrExpression() ")"
        )
        {
            filter = new ETFilter();
            filter.setOperator("and");
            filter.addFilter(filter1);
            filter.addFilter(filter2);
            filter1 = filter;
        }
    )*

    {
        logger.trace("AndExpression: " + filter);
        return filter;
    }
}

ETFilter SimpleExpression():
{
    ETFilter filter = new ETFilter();
}
{
    (
        LOOKAHEAD(BetweenExpression()) filter = BetweenExpression()
        | LOOKAHEAD(InExpression()) filter = InExpression()
        | LOOKAHEAD(IsNullExpression()) filter = IsNullExpression()
        | filter = ComparisonExpression()
    )
    {
        logger.trace("SimpleExpression: " + filter);
        return filter;
    }
}

ETFilter BetweenExpression():
{
    ETFilter filter = new ETFilter();
    String value = null;
}
{
    value = Value()
    {
        filter.setProperty(value);
    }

    < BETWEEN >
    {
        filter.setOperator("between");
    }

    value = Value()
    {
        filter.addValue(value);
    }

    < AND >

    value = Value()
    {
        filter.addValue(value);
    }

    {
        logger.trace("returning filter: " + filter);
        return filter;
    }
}

ETFilter ComparisonExpression():
{
    ETFilter filter = new ETFilter();
    String value = null;
}
{
    value = Value()
    {
        filter.setProperty(value);
    }

    (
        "="
        {
            filter.setOperator("=");
        }
        | "!="
        {
            filter.setOperator("!=");
        }
        | "<"
        {
            filter.setOperator("<");
        }
        | "<="
        {
            filter.setOperator("<=");
        }
        | ">"
        {
            filter.setOperator(">");
        }
        | ">="
        {
            filter.setOperator(">=");
        }
        | < LIKE >
        {
            filter.setOperator("like");
        }
    )

    value = Value()
    {
        filter.addValue(value);
    }

    {
        logger.trace("ComparisonExpression: " + filter);
        return filter;
    }
}

ETFilter InExpression():
{
    ETFilter filter = new ETFilter();
    String value = null;
}
{
    value = Value()
    {
        filter.setProperty(value);
    }

    < IN >
    {
        filter.setOperator("in");
    }

    "("

    value = Value()
    {
        filter.addValue(value);
    }

    (
        ","

        value = Value()
        {
            filter.addValue(value);
        }
    )+

    ")"

    {
        logger.trace("returning filter: " + filter);
        return filter;
    }
}

ETFilter IsNullExpression():
{
    ETFilter filter = new ETFilter();
    String value = null;
}
{
    value = Value()
    {
        filter.setProperty(value);
    }

    < IS >

    (
        < NULL >
        {
            filter.setOperator("is null");
        }
        | < NOT > < NULL >
        {
            filter.setOperator("is not null");
        }
    )

    {
        logger.trace("returning filter: " + filter);
        return filter;
    }
}

String Value():
{
    Token token = null;
}
{
    (
        token = < UNQUOTED_STRING >
        {
            return token.image;
        }
        | token = < SINGLE_QUOTED_STRING >
        {
            return token.image.substring(1, token.image.length() - 1);
        }
        | token = < DOUBLE_QUOTED_STRING >
        {
            return token.image.substring(1, token.image.length() - 1);
        }
    )
}
