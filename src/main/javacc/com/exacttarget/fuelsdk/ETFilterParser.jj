//
// This file is part of the Fuel Java SDK.
//
// Copyright (C) 2013, 2014 ExactTarget, Inc.
// All rights reserved.
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software
// is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
// KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
// OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
// OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
// OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
// THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

options
{
    static = false;
}

PARSER_BEGIN(ETFilterParser)
package com.exacttarget.fuelsdk;

import com.exacttarget.fuelsdk.internal.FilterPart;
import com.exacttarget.fuelsdk.internal.SimpleFilterPart;
import com.exacttarget.fuelsdk.internal.SimpleOperators;

public class ETFilterParser {
    public static void main(String[] args)
        throws ParseException, TokenMgrError
    {
        ETFilterParser parser = new ETFilterParser(System.in);
        parser.parse();
    }
}
PARSER_END(ETFilterParser)

SKIP: { " " | "\n" | "\r" | "\t" }

TOKEN [IGNORE_CASE]:
{
    < AND : "and" >
    | < OR : "or" >
    | < NOT : "not" >
    | < BETWEEN : "between" >
    | < IN : "in" >
    | < IS : "is" >
    | < LIKE : "like" >
    | < NULL : "null" >
}

TOKEN:
{
    < VALUE : (["A"-"Z"] | ["a"-"z"] | ["0"-"9"] | "_")+ >
}

FilterPart parse():
{
    FilterPart filter = null;
}
{
    (
        LOOKAHEAD(BetweenExpression()) filter = BetweenExpression()
        | LOOKAHEAD(InExpression()) filter = InExpression()
        | LOOKAHEAD(NullCheckExpression()) filter = NullCheckExpression()
        | filter = ComparisonExpression()
    )
    {
        System.out.println(filter);
    }
    {
        return filter;
    }
}

SimpleFilterPart BetweenExpression():
{
    SimpleFilterPart filterPart = new SimpleFilterPart();
    Token token = null;
}
{
    token = < VALUE >
    {
        filterPart.setProperty(token.image);
    }

    < BETWEEN >
    {
        filterPart.setSimpleOperator(SimpleOperators.BETWEEN);
    }

    token = < VALUE >
    {
        filterPart.getValue().add(token.image);
    }

    < AND >

    token = < VALUE >
    {
        filterPart.getValue().add(token.image);
    }

    {
        return filterPart;
    }
}

SimpleFilterPart ComparisonExpression():
{
    SimpleFilterPart filterPart = new SimpleFilterPart();
    Token token = null;
}
{
    token = < VALUE >
    {
        filterPart.setProperty(token.image);
    }

    (
        "="
        {
            filterPart.setSimpleOperator(SimpleOperators.EQUALS);
        }
        | "!="
        {
            filterPart.setSimpleOperator(SimpleOperators.NOT_EQUALS);
        }
        | "<"
        {
            filterPart.setSimpleOperator(SimpleOperators.LESS_THAN);
        }
        | "<="
        {
            filterPart.setSimpleOperator(SimpleOperators.LESS_THAN_OR_EQUAL);
        }
        | ">"
        {
            filterPart.setSimpleOperator(SimpleOperators.GREATER_THAN);
        }
        | ">="
        {
            filterPart.setSimpleOperator(SimpleOperators.GREATER_THAN_OR_EQUAL);
        }
        | < LIKE >
        {
            filterPart.setSimpleOperator(SimpleOperators.LIKE);
        }
    )

    token = < VALUE >
    {
        filterPart.getValue().add(token.image);
    }

    {
        return filterPart;
    }
}

SimpleFilterPart InExpression():
{
    SimpleFilterPart filterPart = new SimpleFilterPart();
    Token token = null;
}
{
    token = < VALUE >
    {
        filterPart.setProperty(token.image);
    }

    < IN >
    {
        filterPart.setSimpleOperator(SimpleOperators.IN);
    }

    "("

    token = < VALUE >
    {
        filterPart.getValue().add(token.image);
    }

    (
        ","

        token = < VALUE >
        {
            filterPart.getValue().add(token.image);
        }
    )+

    ")"

    {
        return filterPart;
    }
}

SimpleFilterPart NullCheckExpression():
{
    SimpleFilterPart filterPart = new SimpleFilterPart();
    Token token = null;
}
{
    token = < VALUE >
    {
        filterPart.setProperty(token.image);
    }

    < IS >

    (
        < NULL >
        {
            filterPart.setSimpleOperator(SimpleOperators.IS_NULL);
        }
        | < NOT > < NULL >
        {
            filterPart.setSimpleOperator(SimpleOperators.IS_NOT_NULL);
        }
    )

    {
        return filterPart;
    }
}
