//
// This file is part of the Salesforce Marketing Cloud Java client library.
//
// Copyright (c) 2013, 2014, 2015, ExactTarget, Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// * Neither the name of ExactTarget, Inc. nor the names of its
// contributors may be used to endorse or promote products derived
// from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

options
{
    static = false;
}

PARSER_BEGIN(ETFilterParser)
package com.exacttarget.fuelsdk;

import org.apache.log4j.Logger;

public class ETFilterParser {
    private static Logger logger = Logger.getLogger(ETFilterParser.class);
}
PARSER_END(ETFilterParser)

SKIP: { " " | "\n" | "\r" | "\t" }

TOKEN [IGNORE_CASE]:
{
    < AND : "and" >
    | < OR : "or" >
    | < NOT : "not" >
    | < BETWEEN : "between" >
    | < IN : "in" >
    | < IS : "is" >
    | < LIKE : "like" >
    | < NULL : "null" >
}

TOKEN:
{
    < UNQUOTED_STRING : (~[" ", "\n", "\r", "\t", "'", "\"", "=", "!", "<", ">", "(", ")", ","])+ >
    | < SINGLE_QUOTED_STRING : "'" (~["\n", "\r", "'"])* "'" >
    | < DOUBLE_QUOTED_STRING : "\"" (~["\n", "\r", "\""])* "\"" >
}

ETFilter parse():
{
    ETFilter filter = null;
}
{
    filter = Expression()

    {
        logger.trace("returning filter: " + filter);
        return filter;
    }
}

ETFilter Expression():
{
    ETFilter filter = null;
}
{
    (
        LOOKAHEAD(OrExpression()) filter = OrExpression()
        | "(" filter = Expression() ")"
        {
            ETFilter f = filter;
            filter = new ETFilter();
            filter.addFilter(f);
        }
    )

    {
        logger.trace("Expression: " + filter);
        return filter;
    }
}

ETFilter OrExpression():
{
    ETFilter filter = null;
    ETFilter filter1 = null;
    ETFilter filter2 = null;
}
{
    filter1 = AndExpression()
    {
        filter = filter1;
    }
    (
        LOOKAHEAD(<OR>) <OR>
        filter2 = AndExpression()
        {
            filter = new ETFilter();
            filter.setOperator(ETFilter.Operator.OR);
            filter.addFilter(filter1);
            filter.addFilter(filter2);
            filter1 = filter;
        }
    )*

    {
        logger.trace("OrExpression: " + filter);
        return filter;
    }
}

ETFilter AndExpression():
{
    ETFilter filter = null;
    ETFilter filter1 = null;
    ETFilter filter2 = null;
}
{
    (
        LOOKAHEAD(SimpleExpression()) filter1 = SimpleExpression()
        | "(" filter1 = OrExpression() ")"
        {
            ETFilter f = filter1;
            filter1 = new ETFilter();
            filter1.addFilter(f);
        }
    )
    {
        filter = filter1;
    }

    (
        LOOKAHEAD(<AND>) <AND>
        (
            LOOKAHEAD(SimpleExpression()) filter2 = SimpleExpression()
            | "(" filter2 = OrExpression() ")"
        )
        {
            filter = new ETFilter();
            filter.setOperator(ETFilter.Operator.AND);
            filter.addFilter(filter1);
            filter.addFilter(filter2);
            filter1 = filter;
        }
    )*

    {
        logger.trace("AndExpression: " + filter);
        return filter;
    }
}

ETFilter SimpleExpression():
{
    ETFilter filter = new ETFilter();
}
{
    (
        LOOKAHEAD(BetweenExpression()) filter = BetweenExpression()
        | LOOKAHEAD(InExpression()) filter = InExpression()
        | LOOKAHEAD(IsNullExpression()) filter = IsNullExpression()
        | filter = ComparisonExpression()
    )
    {
        logger.trace("SimpleExpression: " + filter);
        return filter;
    }
}

ETFilter BetweenExpression():
{
    ETFilter filter = new ETFilter();
    String value = null;
}
{
    value = Value()
    {
        filter.setProperty(value);
    }

    < BETWEEN >
    {
        filter.setOperator(ETFilter.Operator.BETWEEN);
    }

    value = Value()
    {
        filter.addValue(value);
    }

    < AND >

    value = Value()
    {
        filter.addValue(value);
    }

    {
        logger.trace("BetweenExpression: " + filter);
        return filter;
    }
}

ETFilter ComparisonExpression():
{
    ETFilter filter = new ETFilter();
    String value = null;
}
{
    value = Value()
    {
        filter.setProperty(value);
    }

    (
        "="
        {
            filter.setOperator(ETFilter.Operator.EQUALS);
        }
        | "!="
        {
            filter.setOperator(ETFilter.Operator.NOT_EQUALS);
        }
        | "<"
        {
            filter.setOperator(ETFilter.Operator.LESS_THAN);
        }
        | "<="
        {
            filter.setOperator(ETFilter.Operator.LESS_THAN_OR_EQUALS);
        }
        | ">"
        {
            filter.setOperator(ETFilter.Operator.GREATER_THAN);
        }
        | ">="
        {
            filter.setOperator(ETFilter.Operator.GREATER_THAN_OR_EQUALS);
        }
        | < LIKE >
        {
            filter.setOperator(ETFilter.Operator.LIKE);
        }
    )

    value = Value()
    {
        filter.addValue(value);
    }

    {
        logger.trace("ComparisonExpression: " + filter);
        return filter;
    }
}

ETFilter InExpression():
{
    ETFilter filter = new ETFilter();
    String value = null;
}
{
    value = Value()
    {
        filter.setProperty(value);
    }

    < IN >
    {
        filter.setOperator(ETFilter.Operator.IN);
    }

    "("

    value = Value()
    {
        filter.addValue(value);
    }

    (
        ","

        value = Value()
        {
            filter.addValue(value);
        }
    )+

    ")"

    {
        logger.trace("InExpression: " + filter);
        return filter;
    }
}

ETFilter IsNullExpression():
{
    ETFilter filter = new ETFilter();
    String value = null;
}
{
    value = Value()
    {
        filter.setProperty(value);
    }

    < IS >

    (
        < NULL >
        {
            filter.setOperator(ETFilter.Operator.IS_NULL);
        }
        | < NOT > < NULL >
        {
            filter.setOperator(ETFilter.Operator.IS_NOT_NULL);
        }
    )

    {
        logger.trace("IsNullExpression: " + filter);
        return filter;
    }
}

String Value():
{
    Token token = null;
}
{
    (
        token = < UNQUOTED_STRING >
        {
            return token.image;
        }
        | token = < SINGLE_QUOTED_STRING >
        {
            return token.image.substring(1, token.image.length() - 1);
        }
        | token = < DOUBLE_QUOTED_STRING >
        {
            return token.image.substring(1, token.image.length() - 1);
        }
    )
}
