Version 0.999999-pre1.0-1
-------------------------

A.k.a. the road to 1.0!

* The most significant change in this release is an overhaul of
how you interact with data extensions. In previous releases,
you had to manage data extension rows and columns using the
classes ETDataExtensionRowService and ETDataExtensionColumnService,
respectively. In this release, you operate on data extension
rows and columns using familiar SQL-like methods called
insert, select, update and delete. In addition, you now get
access to data extensions from the ETClient instance rather
than through the class ETDataExtensionService. Finally, managing
data extension rows and columns has been greatly simplified.

To retrieve a data extension by customer key:

    ETFilter filter = new ETSimpleFilter("CustomerKey",
                                         ETFilterOperators.EQUALS,
                                         "myCustomerKey");
    ETDataExtension dataExtension = client.retrieveDataExtension(filter);

To retrieve multiple data extensions at the same time (assuming filter
matches multiple rows):

    List<ETDataExtension> dataExtensions = client.retrieveDataExtensions(filter);

To create a data extension row:

    ETDataExtensionRow row = new ETDataExtensionRow();
    row.setColumn("id", "1234");
    row.setColumn("name", "iPhone 5c");
    row.setColumn("price", "99.00").

To add that row to the data extension dataExtension:

    dataExtension.insert(row);

To add multiple rows to the data extension dataExtension:

    dataExtension.insert(row1, row2, ..., rowN);

To retrieve data extension rows from the data extension dataExtension:

    ETFilter filter = new ETSimpleFilter("name",
                                         ETFilterOperators.EQUALS,
                                         "myName");
    List<ETDataExtensionRow> rows = dataExtension.select(filter);
    for (ETDataExtensionRow row : rows) {
        // ...
    }

To only retrieve the specified columns, you can specify them after the
filter:

    List<ETDataExtensionRow> rows = dataExtension.select(filter, "id", "name");

To retrieve the value of the specified column in the data extension row:

    row.getColumn("name");

To update a data extension row in the data extension dataExtension:

    dataExtension.update(row);

As with insert(), you can pass multiple rows to update():

    dataExtension.update(row1, row2, ..., rowN);

To delete data extension rows, specify a filter, and all matching
rows are deleted. For example, to delete the row where the "name"
column is equal to the string "myName":

    ETFilter filter = new ETSimpleFilter("name",
                                         ETFilterOperators.EQUALS,
                                         "myName");
    dataExtension.delete(filter);

ETDataExtension, ETDataExtensionColumn, and ETDataExtensionRow have
been moved to the top level directory from the "model" subpackage.

ETDataExtensionFieldType has been renamed ETDataExtensionColumnType
to fix the leaky abstraction (the SDK renames DataExtensionField to
ETDataExtensionColumn but the enum wasn't renamed accordingly).

ETDataExtension now has an addColumn() for adding a column.

In the source tree, deprecated classes and interfaces have been moved
to src/main-deprecated so as to keep the main area clean. Although
classes and interfaces are being deprecated in the lead up to 1.0 to
simplify the developer experience, all deprecated classes will
be supported until at least version 2.0. ANY BREAKAGE TO BACKWARD
COMPATIBILITY WITH VERSION 0.999999 SHOULD BE CONSIDERED A BUG!

* Folder retrieves now properly return the parent folder ID. In
addition, specifying the parent folder has been streamlined, so
you can now do:

    ETFolder folder = new ETFolder();
    // ...
    folder.setParentFolderId(1234);

rather than:

    ETFolder folder = new ETFolder();
    // ...
    ETFolder parentFolder = new ETFolder();
    parentFolder.setId(1234);
    folder.setParentFolder(parentFolder);

* post() now returns the IDs of the created objects. So you can now do:

    ETResponse<Integer> response = service.post(client, folders);
    for (int id : response.getResults()) {
        System.out.println(id);
    }

Version 0.999999
----------------

The primary new feature is the addition of partial object loading.
Now, if you want to include only specific properties of the object(s)
in the response, you can do that by specifying the property names
as arguments to the get call, e.g.:

    ETResponse<ETList> response = service.get(client, "name", "description");

You can also use partial object loading when using filters:

    ETResponse<ETList> response = service.get(client, filter, "name", "description");

As before, if no properties are specified, all properties are loaded, e.g.:

    ETResponse<ETList> response = service.get(client);

or

    ETResponse<ETList> response = service.get(client);

There were also numerous bug fixes and smaller feature enhancements.
For more information, please see the ChangeLog file.
